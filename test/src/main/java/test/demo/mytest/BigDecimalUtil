/**  
 * @author: Ji YongGuang.  
 * @date: 19:50 2017/12/14
*   TODO:将Double转换为泛型，其它用泛型  Java中float的精度为6-7位有效数字。double的精度为15-16位

API

构造器：

构造器                   描述  
BigDecimal(int)       创建一个具有参数所指定整数值的对象。  
BigDecimal(double)    创建一个具有参数所指定双精度值的对象。  
BigDecimal(long)      创建一个具有参数所指定长整数值的对象。  
BigDecimal(String)    创建一个具有参数所指定以字符串表示的数值的对象。  

函数：

方法                    描述  
add(BigDecimal)       BigDecimal对象中的值相加，然后返回这个对象。  
subtract(BigDecimal)  BigDecimal对象中的值相减，然后返回这个对象。  
multiply(BigDecimal)  BigDecimal对象中的值相乘，然后返回这个对象。  
divide(BigDecimal)    BigDecimal对象中的值相除，然后返回这个对象。  
toString()            将BigDecimal对象的数值转换成字符串。  
doubleValue()         将BigDecimal对象中的值以双精度数返回。  
floatValue()          将BigDecimal对象中的值以单精度数返回。  
longValue()           将BigDecimal对象中的值以长整数返回。  
intValue()            将BigDecimal对象中的值以整数返回。
 
 
*/  
pubic class BigDecimalUtil {  

    private BigDecimalUtil() {  

    }  

    public static BigDecimal add(double v1, double v2) {// v1 + v2  
        BigDecimal b1 = new BigDecimal(Double.toString(v1));  
        BigDecimal b2 = new BigDecimal(Double.toString(v2));  
        return b1.add(b2);  
    }  

    public static BigDecimal sub(double v1, double v2) {  
        BigDecimal b1 = new BigDecimal(Double.toString(v1));  
        BigDecimal b2 = new BigDecimal(Double.toString(v2));  
        return b1.subtract(b2);  
    }  

    public static BigDecimal mul(double v1, double v2) {  
        BigDecimal b1 = new BigDecimal(Double.toString(v1));  
        BigDecimal b2 = new BigDecimal(Double.toString(v2));  
        return b1.multiply(b2);  
    }  

    public static BigDecimal div(double v1, double v2) {  
        BigDecimal b1 = new BigDecimal(Double.toString(v1));  
        BigDecimal b2 = new BigDecimal(Double.toString(v2));  
        // 2 = 保留小数点后两位   ROUND_HALF_UP = 四舍五入  
        return b1.divide(b2, 2, BigDecimal.ROUND_HALF_UP);// 应对除不尽的情况  
    }  
}  
